{
	// Place your snippets for makefile here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and $(1)label}, $(2)another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"Makefile": {
		"prefix": "!make",
		"scope": "makefile",
		"body": [
			"# CONFIG FLAGS COMPILER",
			"CXX           = g++",
			"CC            = gcc",
			"",
			"INCLUDE       = -Isrc -Ilib -Iinclude",
			"DECLARE       = ",
			"",
			"CFLAGS       = -O0 -g -Wall \\${INCLUDE} \\${DECLARE}",
			"CXXFLAGS     = -O0 -std=c++23 -g -Wall \\${INCLUDE} \\${DECLARE}",
			"LDFLAGS      = ",
			"",
			"# DEFINE NAME LIB 'python' AND 'exe'",
			"app           = main.exe",
			"",
			"# BREAKLINE CONSTANT",
			"ifeq (\\${OS},Windows_NT)",
			"break_line = \\\\\\\\\\\\\\\\\\\\\\\\n",
			"app_       = ${app\\}",
			"else",
			"break_line = \\\\\\\\\\\\\\\\n",
			"app_       = ./${app\\}",
			"endif",
			"",
			"# READ FILES",
			"src           = $(wildcard src/*.c*)",
			"lib           = $(wildcard lib/*.c*)",
			
			"",
			"# ADJUST 'src' E 'obj'",
			"obj           = $(addsuffix .o,$(basename $(src:src/%=obj/%)))",
			"obj          += $(addsuffix .o,$(basename $(lib:lib/%=obj/%)))",
			"",
			"# COMPILATION LAW",
			"all: default",
			"",
			"i: init",
			"",
			"m: create_main",
			"",
			"default: run",
			"",
			"# COMPILATION 'app {exe}'",
			"\\${app}: \\${obj}",
			"	$(CXX) -o \\${app} \\${obj}",
			"",
			"# WRITE '*.o' IN 'obj'",
			"obj/%.o : src/%.cpp",
			"	$(CXX) \\${CXXFLAGS} -o $@ -c $<",
			"",
			"obj/%.o : lib/%.cpp",
			"	$(CXX) \\${CXXFLAGS} -o $@ -c $<",
			"",
			"# MONITOR CHANGES IN '.h'",
			"# obj/test.o : src/test.h",
			"",
			"# INITIALIZE PATHS",
			"init: create_folders",
			"init: create_main",
			"init: create_readme",
			"",
			".SILENT: create_folders",
			"create_folders:",
			"	mkdir obj src include lib",
			"",
			".SILENT: create_main",
			"create_main:",
			"	printf \"#include <iostream>\\n\\n\" > src/main.cpp",
			"	printf \"int main(int argc, char const *argv[])\\n\" >> src/main.cpp",
			"	printf \"{\\n\" >> src/main.cpp",
			"	printf \"    std::cout << \\\"hello\\\" << std::endl;\\n\" >> src/main.cpp",
			"	printf \"	return 0;\\n\" >> src/main.cpp",
			"	printf \"}\" >> src/main.cpp",
			"",
			".SILENT: create_readme",
			"create_readme:"
			"	printf \"\\n### REF\\n\" > README.md",
			"",
			"run: \\${app}",
			"	\\${app_}",
			"",
			"clean: ",
			"	rm obj/*",
			"",
			"reset:",
			"	rm -rf *",
		]
	}
}