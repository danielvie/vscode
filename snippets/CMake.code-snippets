{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:

// #include <iostream>

// int main(int argc, char const *argv[])
// {
// 	std::cout << "-----------------------------------------\\\n";
// 	std::cout << "hello\\\n";
// 	return 0;
// }


	"CMake": {
		"scope": "makefile",
		"prefix": "!cmake",
		"body": [
			"all: default",
			"",
			"i: init",
			"",
			"m: create_main",
			"",
			"c: clean",
			"",
			"default:",
			"	cmake -B ./build",
			"	cmake --build ./build",
			"	./build/Debug/main",
			"",
			"init: create_cmake",
			"init: create_folders",
			"init: create_main",
			"",
			"create_cmake:",
			"	printf \"cmake_minimum_required(VERSION 3.20.0)\\n\" > CMakeLists.txt",
			"	printf \"project(Main)\\n\" >> CMakeLists.txt",
			"	printf \"\\n\" >> CMakeLists.txt",
			"	printf \"set(CMAKE_CXX_STANDARD 17)\\n\" >> CMakeLists.txt",
			"	printf \"\\n\" >> CMakeLists.txt",
			"	printf \"include_directories(fun)\\n\" >> CMakeLists.txt",
			"	printf \"include_directories(src)\\n\" >> CMakeLists.txt",
			"	printf \"\\n\" >> CMakeLists.txt",
			"	printf \"file(GLOB mySources CONFIGURE_DEPENDS \"src/*.cpp\" \"fun/*.cpp\") >> CMakeLists.txt",
			"	printf \"add_executable(Main src/main.cpp)\" >> CMakeLists.txt",
			"",
			"create_folders:",
			"	mkdir fun",
			"	mkdir build",
			"	mkdir src",
			"",
			"create_main:",
			"	printf \"#include <iostream>\\n\" > src/main.cpp",
			"	printf \"\\n\" >> src/main.cpp",
			"	printf \"int main(int argc, char const *argv[])\\n\" >> src/main.cpp",
			"	printf \"{\\n\" >> src/main.cpp",
			"	printf \"\tstd::cout << \\\"hello\\\" << std::endl;\\n\" >> src/main.cpp",
			"	printf \"}\\n\" >> src/main.cpp",
			"",
			"clean:",
			"	rm -rf build",
			"",
			"purge:",
			"	rm -rf build",
			"	rm -rf fun",
			"	rm -rf src",
		],
		"description": "Log output to console"
	}
}